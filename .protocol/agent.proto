syntax = "proto3";
package agent;

message Archive {
  bytes deploymentID = 1;
  Peer peer = 2;
  string location = 3;
  bytes checksum = 4;
  int64 ts = 5; // unix timestamp.
  string initiator = 6;
}

message PeerMetadata {
  bytes capability = 1;
  uint32 RPCPort = 2;
  uint32 RaftPort = 3;
  uint32 SWIMPort = 4;
  uint32 TorrentPort = 5;
  int32 Status = 6;
}

message Peer {
  enum State { Node = 0; Client = 2; Gone = 3; }
  State Status = 1;
  string ip = 2;
  string name = 3;
  uint32 RPCPort = 4;
  uint32 RaftPort = 5;
  uint32 SWIMPort = 6;
  uint32 TorrentPort = 7;
}

// Represents every message sent between nodes. effectively describes all possible events we may want
// to act upon.
message Message {
  enum NodeEvent { Joined = 0; Departed = 1; }
  enum Type {
    PeerEvent = 0;
    LogEvent = 1;
    DeployCommandEvent = 2;
    DeployEvent = 3;
    PeersFoundEvent = 4;
    PeersCompletedEvent = 5;
  }

  string id = 9;
  bool replay = 999;

  // Identifies which field is filled in.
  Type type = 1;
  Peer peer = 2;
  int64 ts = 3; // unix timestamp.

  oneof Event {
    bool none = 4;
    int64 int = 5;
    Log log = 6;
    DeployCommand deployCommand = 7;
    Deploy deploy = 8;
    NodeEvent membership = 10;
  }
}

// Write ahead log
message WAL {
  repeated Message messages = 1;
}

message DeployOptions {
  int64 concurrency = 2;    // sets the number of simultaneously instance deploys to run.
  int64 timeout = 3;        // how long to wait before a single deploy is considered a failure.
  bool ignoreFailures = 4;  // ignore failures during the deploy.
  bool silenceDeployLogs = 5; // silence the deploy logging.
}

message DeployCommand {
  enum Command { Begin = 0; Cancel = 1; Done = 2; Failed = 3; }
  Command command = 1;
  Archive archive = 2;
  DeployOptions options = 5;
}

message Deploy {
  enum Stage { Failed = 0; Deploying = 1; Completed = 2; }
  Stage stage = 1;
  Archive archive = 2;
  DeployOptions options = 4;
  string error = 3;
}

message DeployCommandRequest {
  Archive archive = 1;
  DeployOptions options = 5;
  repeated Peer peers = 4;
}
message DeployCommandResult {}

message Log {
  string log = 1;
}

message UploadMetadata {
  uint64 bytes = 1;
  string initiator = 2;
}

message UploadChunk {
  bytes data = 1;
  bytes checksum = 2;
  oneof initialChunkMetadata {
    bool none = 3;
    UploadMetadata metadata = 4;
  }
}

message UploadResponse {
  Archive archive = 1;
}

message WatchRequest {}
message DispatchResponse {}

service Quorum {
  rpc Upload(stream UploadChunk) returns (UploadResponse) {}
  rpc Watch(WatchRequest) returns (stream Message) {}
  rpc Dispatch(DispatchRequest) returns (DispatchResponse) {}
  rpc Deploy(DeployCommandRequest) returns (DeployCommandResult) {}
}

message ConnectRequest {}
message ConnectResponse {
  bytes secret = 1;
  repeated Peer quorum = 2;
}

message StatusRequest {}
message StatusResponse {
  Peer peer = 1;
  repeated Deploy deployments = 4;
}

message DeployRequest {
  Archive archive = 1;
  DeployOptions options = 2;
}
message DeployResponse {
  Deploy deploy = 1;
}

message ShutdownRequest{}
message ShutdownResponse{}

message CancelRequest{}
message CancelResponse{}

service Agent {
  rpc Connect(ConnectRequest) returns (ConnectResponse) {}
  rpc Info(StatusRequest) returns (StatusResponse) {}
  rpc Deploy(DeployRequest) returns (DeployResponse) {}
  rpc Cancel(CancelRequest) returns (CancelResponse) {}
  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse) {}
}

message DispatchRequest {
  repeated Message messages = 1;
}

service Observer {
  rpc Dispatch(DispatchRequest) returns (DispatchResponse) {}
}
